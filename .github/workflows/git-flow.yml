name: Changelog generator and GitFlow actions

on: 
  push:
    tags:
      - '*'
      
jobs:
  changelog-generator:
    runs-on: ubuntu-latest
    env:
      TagOnMaster: false
      Branch: master
    steps:
    - uses: actions/checkout@v1
    - name: Set local user
      run: |
        git config --local user.email "devteam@thecogworks.com"
        git config --local user.name "cogworks-infrastructure"
    - name: Checkout to master from current head
      run: |
        git checkout master
        git pull "https://$GITHUB_ACTOR:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY.git" master
    - name: Checking if hotfix applied to master
      run: |
        HotFixOnMaster=$(git branch --contains refs/tags/`basename $GITHUB_REF` | sed 's/remotes\/origin\///' | sed 's/* //' | grep master)

        if [[ "$HotFixOnMaster" == *"master"* ]]; then
          echo ::set-env name=TagOnMaster::true
        fi
      continue-on-error: true
    - name: Set branch variable
      if: env.TagOnMaster == 'false' || env.TagOnMaster == 0
      run: echo ::set-env name=Branch::$(git branch -a --contains refs/tags/`basename $GITHUB_REF` | sed 's/remotes\/origin\///' | sed 's/master//' | sed 's/* //' | grep release/`basename $GITHUB_REF`)
    - name: Checkout to branch
      run: |
        echo Branch: $Branch
        git checkout $Branch
    - name: Check the tag
      run: git describe --exact-match `git rev-parse HEAD`
    - name: Get tag
      run: echo ::set-env name=Tag::$(git describe --exact-match `git rev-parse HEAD`)
    - name: Install dependencies
      run: |
        rm -rf node_modules
        npm install
    - name: Generate changelog and update npm version
      run: npm run release
    - name: Remove tag
      run: git tag -d $Tag
    - name: Updating tags
      run: |
        git pull "https://$GITHUB_ACTOR:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY.git" master
        git tag -a $Tag -m "$Tag"
        git push "https://$GITHUB_ACTOR:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY.git" --tag -f
    - name: Pushing latest changes to master
      run: |
        git pull "https://$GITHUB_ACTOR:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY.git" master
        git push "https://$GITHUB_ACTOR:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY.git" $Branch:master

    - name: Deleting release branch
      if: env.TagOnMaster == 'false' || env.TagOnMaster == 0
      run: git push "https://$GITHUB_ACTOR:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY.git" --delete $Branch

    - name: Create file status_changelog-generator.txt and write the job status into it
      if: always()
      run: echo ${{ job.status }} > status_changelog-generator.txt
    - name: Upload file status_changelog-generator.txt as an artifact
      if: always()
      uses: actions/upload-artifact@v1
      with:
        name: pass_status_changelog-generator
        path: status_changelog-generator.txt

  updating-branches:
    needs: changelog-generator
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Set local user
      run: |
        git config --local user.email "devteam@thecogworks.com"
        git config --local user.name "cogworks-infrastructure"
    - name: Checkout develop and pull latest develop
      run: |
        git checkout develop
        git pull "https://$GITHUB_ACTOR:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY.git" develop
    - name: Pull master into develop
      run: |
        Conflicts=$(git pull "https://$GITHUB_ACTOR:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY.git" master -q --ff-only || echo "fatal: Not possible to fast-forward, aborting")
        AbortingMsg='aborting'

        if [[ "$Conflicts" == *"$AbortingMsg"* ]]; then
          exit 1
        fi
    - name: Pushing develop to origin if pulling successfully
      if: success()
      run: git push "https://$GITHUB_ACTOR:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY.git" develop:develop
    
    - name: Create file status_updating-branches.txt and write the job status into it
      if: always()
      run: echo ${{ job.status }} > status_updating-branches.txt
    - name: Upload file status_updating-branches.txt as an artifact
      if: always()
      uses: actions/upload-artifact@v1
      with:
        name: pass_status_updating-branches
        path: status_updating-branches.txt

  finalization-and-notification:
    needs: [changelog-generator, updating-branches]
    if: always()
    runs-on: ubuntu-latest
    env:
      Failure: "Failure"
      Success: "Success"
    steps:
      - name: Download artifact pass_status_changelog-generator
        uses: actions/download-artifact@v1
        with:
          name: pass_status_changelog-generator
        continue-on-error: true

      - name: Download artifact pass_status_updating-branches
        uses: actions/download-artifact@v1
        with:
          name: pass_status_updating-branches
        continue-on-error: true

      - name: Set the statuses of jobs
        id: set_outputs
        run: |
          if [ -f "pass_status_changelog-generator/status_changelog-generator.txt" ]; then
           echo "::set-output name=status_changelog-generator::$(<pass_status_changelog-generator/status_changelog-generator.txt)"
          else
            echo "::set-output name=status_changelog-generator::$(echo $Failure)"
          fi

          if [ -f "pass_status_updating-branches/status_updating-branches.txt" ]; then
           echo "::set-output name=status_updating-branches::$(<pass_status_updating-branches/status_updating-branches.txt)"
          else
            echo "::set-output name=status_updating-branches::$(echo $Failure)"
          fi      

      - name: (changelog-generator) Slack notification (successfully tag updated and pushed to master branch)
        if: steps.set_outputs.outputs.status_changelog-generator == env.Success
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_TITLE: 'Release created:'
          SLACK_MESSAGE: "Tag was created and pushed to master branch."
          SLACK_USERNAME: 'Release manager'
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        continue-on-error: true

      - name: (changelog-generator) Slack notification (release could not be created)
        if: steps.set_outputs.outputs.status_changelog-generator == env.Failure
        uses: rtCamp/action-slack-notify@master      
        env:
          SLACK_TITLE: 'Release could not be created:'
          SLACK_MESSAGE: "Please log in to Github and check why release couldn't be created."
          SLACK_USERNAME: 'Release manager'
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        continue-on-error: true

      - name: (updating-branches) Slack notification (Successfully pulled master into develop)
        if: steps.set_outputs.outputs.status_updating-branches == env.Success
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_TITLE: 'Pull succeeded:'
          SLACK_MESSAGE: "Successfully pulled master into develop"
          SLACK_USERNAME: 'Release manager'
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        continue-on-error: true

      - name: (updating-branches) Slack notification (Failed on pulling master into develop)
        if: steps.set_outputs.outputs.status_updating-branches == env.Failure
        uses: rtCamp/action-slack-notify@master      
        env:
          SLACK_TITLE: 'Pull failed'
          SLACK_MESSAGE: "Failed on pulling master into develop"
          SLACK_USERNAME: 'Release manager'
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        continue-on-error: true 

      - name: Jobs status finalization
        if: always()
        run: |
          if [[ "${{ steps.set_outputs.outputs.status_changelog-generator }}" == $Failure ]]; then
            exit 1
          fi

          if [[ "${{ steps.set_outputs.outputs.status_updating-branches }}" == $Failure ]]; then
            exit 1
          fi
